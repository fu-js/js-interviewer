import BackButton from "@/components/custom/back-button";
import If from "@/components/custom/if";
import Layout from "@/components/custom/layout";
import { ModeToggle } from "@/components/custom/mode-toggle";
import { ReloadIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import Interviewing from "./interviewing";
import InterviewTable from "./interview-table";
import useSWR from "swr";
import fetcher from "@/lib/fetcher";
import { useRouter } from "next/router";
import Decision from "@/lib/types/decision";

let metadata = [
  { title: "M√£ s·ªë sinh vi√™n:", content: "HE190182" },
  {
    title: "Link Facebook:",
    content: "https://www.facebook.com/viet.buiquoc.284?mibextid=ZbWKwL",
  },
  {
    title: "Chuy√™n ng√†nh h·ªçc c·ªßa b·∫°n l√† g√¨?",
    content: "C√¥ng ngh·ªá th√¥ng tin",
  },
  {
    title: "B·∫°n h√£y mi√™u t·∫£ b·∫£n th√¢n b·∫±ng 3 t·ª´:",
    content: "Th√≠ch Nh·∫≠t B·∫£n",
  },
  {
    title:
      "B·∫°n c√≥ s·ªü th√≠ch hay t√†i nƒÉng ƒë·∫∑c bi·ªát n√†o kh√¥ng? ƒê·ª´ng ng·∫ßn ng·∫°i khoe v·ªõi ch√∫ng m√¨nh nh·ªØng th·∫ø m·∫°nh hay t√†i l·∫ª c·ªßa b·∫°n nh√©, bi·∫øt ƒë√¢u ƒë√≥ l√† nh·ªØng ƒëi·ªÉm c·ªông r·∫•t l·ªõn ƒë·∫•y!",
    content:
      "M√¨nh kh√° th√≠ch Nh·∫≠t, n·∫øu kh√¥ng v√¨ b√°c Y√™n m·∫•t gi√° l√† m√¨nh ƒëi r·ªìi üò•",
  },
  {
    title: "L√Ω do b·∫°n mu·ªën tham gia v√†o JS Club l√† g√¨?",
    content: "H·ªçc h·ªèi l√† ch√≠nh, ki·∫øm drl l√† ph·ª• :3",
  },
  {
    title:
      "B·∫°n c√≥ th·ªÉ g·ª≠i ch√∫ng m√¨nh 1 t·∫•m ·∫£nh c·ªßa m√¨nh ·ªü b√™n d∆∞·ªõi ƒë·ªÉ ch√∫ng m√¨nh c√≥ th·ªÉ d·ªÖ d√†ng nh·∫≠n ra b·∫°n ƒë∆∞·ª£c kh√¥ng?",
    content:
      "https://drive.google.com/open?id=132Ulu02ssMrSDCzZv74-OP7ci-Ad9iTl",
  },
  { title: "B·∫°n mu·ªën ·ª©ng tuy·ªÉn v√†o ban n√†o", content: "Ban Chuy√™n m√¥n" },
  {
    title:
      "T·∫°i sao b·∫°n l·∫°i l·ª±a ch·ªçn tr·ªü th√†nh th√†nh vi√™n ban Chuy√™n m√¥n? ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y ph√π h·ª£p t·∫°i v·ªã tr√≠ n√†y?",
    content: "M√¨nh h·ªçc CNTT v√† c≈©ng c√≥ bi·∫øt 1 ch√∫t ti·∫øng Nh·∫≠t",
  },
  {
    title: "B·∫°n mu·ªën ƒëƒÉng k√Ω ban chuy√™n m√¥n chuy√™n v·ªÅ m·∫£ng g√¨ nh·ªâ?",
    content: "C·∫£ 2",
  },
  {
    title:
      "Cho ch√∫ng m√¨nh bi·∫øt nhi·ªÅu h∆°n v√† chi ti·∫øt h∆°n nh·ªØng kinh nghi·ªám v√† k·ªπ nƒÉng b·∫°n c√≥ nh√©",
    content: "T·ª´ng h·ªçc xong N4 (t·ª´ nƒÉm l·ªõp 10 üò•)",
  },
];

let interviewees = [
  {
    id: 1,
    name: "Tr·ªãnh Ph·∫°m ƒêoan Trang",
    phoneNumber: "0123456789",
    department: {
      id: 1,
      name: "Ban Chuyen Mon",
    },
    metadata: metadata,
    decision: Decision.PASS,
  },
  {
    id: 2,
    name: "Nguy·ªÖn Th·ªã Thanh Huy·ªÅn",
    phoneNumber: "0123456789",
    department: {
      id: 1,
      name: "Ban Chuyen Mon",
    },
    metadata: metadata,
    decision: Decision.CONSIDERING,
  },
  {
    id: 3,
    name: "V≈© L√™ BƒÉng T√¢m",
    phoneNumber: "0123456789",
    department: {
      id: 1,
      name: "Ban Chuyen Mon",
    },
    metadata: metadata,
    decision: Decision.FAIL,
  },
];

export default function Interview() {
  // interviewing loading
  const [isInterviewing, setIsInterviewing] = useState(true);
  const [data, setData] = useState(interviewees);
  const doneInterviewing = (interviewee: any) => {
    // TODO: call api to update interviewee decision
    setIsInterviewing(false);

    // const newData = [
    //   ...data,
    //   {
    //     ...interviewee,
    //     id: interviewee.length + 1,
    //   },
    // ];
    // setData(newData);

    setTimeout(() => {
      setIsInterviewing(true);
    }, 1000);
  };

  const submitNote = (interviewee: any) => {};

  // interview load
  const router = useRouter();
  const deskId = router.query.id as string;
  const { data: response, isLoading } = useSWR(
    `/api/desk/${deskId}/interviewing`,
    fetcher,
    {
      refreshInterval: 1000,
    }
  );

  // edit history
  const edit = (newInterviewee: any) => {
    // TODO: call api to update interviewee decision
    const newData = data.map((interviewee) => {
      if (interviewee.id === newInterviewee.id) {
        console.log(newInterviewee);
        return newInterviewee;
      }
      return interviewee;
    });
    setData(newData);
  };

  return (
    <Layout>
      <main className="p-5">
        <div className="absolute right-2 top-2">
          <ModeToggle />
        </div>
        <BackButton href="/interview" />
        <h1 className="text-4xl px-2 py-5 font-bold">
          {"B√†n ph·ªèng v·∫•n " + deskId}
        </h1>
        <h2 className="text-4xl text-center p-5 font-bold">Ongoing</h2>
        <If condition={!isInterviewing}>
          <div className="border flex rounded-lg p-4 border-dashed border-border justify-center items-center">
            <div className="flex gap-2 text-muted-foreground py-5">
              <ReloadIcon className="mr-2 -mt-1 h-10 w-10 animate-spin" />
              <p className="text-2xl">Awating assignment</p>
            </div>
          </div>
        </If>
        {response && isInterviewing && !isLoading && (
          <Interviewing
            data={response.data}
            onDone={doneInterviewing}
            onNoteSubmit={submitNote}
          />
        )}
        <h2 className="mt-20 text-4xl text-center p-5 font-bold">
          Interview table
        </h2>
        <div className="border border-border rounded-lg overflow-hidden">
          <InterviewTable data={data} onEdit={edit} />
        </div>
      </main>
    </Layout>
  );
}
